print('Hello world')

# 라이브러리
# 여러모듈과 패키지의 모음
# 특정 작업을 수행하기 위한 함수, 클래스, 상수 등의 모음
# 라이브러리는 여러 패키지들의 묶음으로 구성되며, 패키지는 여러 모듈의 묶음으로 구성
# 표준 라이브러리(Standard Library): 파이썬 설치 시 기본으로 제공됨
# 외부 라이브러리(Third-party Library): 다양한 회사, 개발자들이 제작하여 제공

# 파이썬 표준 라이브러리 활용하기
# 랜덤 숫자 생성하는 라이브러리: random
# 복잡한 수학 관련 라이브러리: math
# 시간과 날짜 라이브러리: datetime
# 파일, 디렉토리 등 운영체제 라이브러리: os

# import math
# result = math.sqrt(25)
# print("제곱근:", result)

# import datetime
# result = datetime.date.today()
# print("오늘의 날짜:", today)

# 파이썬 외부 라이브러리 활용하기
# 필요한 라이브러리 설치하기: pip (Package Installer for Python)
# python -m pip install {package_name}
# python -m pip install SomePackage==1.0.4 # specific version
# python -m pip install "SomePackage>=1.0.4" # minimum version

# 라이브러리 버전 관리하기: requirements.txt
# 어떤 라이브러리와 버전을 사용하는지 정확히 설정
# 외부 라이브러리의 업데이트에 우리 프로젝트가 영향을 받지 않도록

# 라이브러리 사용하기
# import {library_name}

# 기본설치: 모든 개발환경에 공통적으로 설치됨
# 가상환경: 해당 프로젝트에서만 사용되는 패키지 설치 (여러 프로젝트를 동시에 개발할 때, 의존성 충돌을 막을 수 있음)



# 대표적인 통신용 데이터 포멧
# JSON, XML, 고정길이 전문(Fixed Length)

# 동기(Sync) 처리 : 실시간 처리, 요청을 보내고, 응답이 올 때 까지 대기, 응답이 올 때 까지 다른 작업을 진행하지 않음
# 비동기(Async) 처리 : 지속성 처리, 요청을 보낸 다음, 응답 여부와 관계 없이 다른 작업 진행. 응답이 도착하면 약속된 처리 프로세스가 별도로 진행됨
# HTTPS 통신의 필요성 : 일반 HTTP 통신 시 데이터가 암호화 되지 않아, 중간에 탈취당할 위험성이 있음.
    # 인증서 기반의 HTTPS 통신을 통해, 사이트의 소유주 확인과 데이터 암호화를 통한 보안
    # 데이터가 암호화되어 전송되기 때문에 개인정보 보호 또한 가능
    # 브라우저의 "안전한 연결 경고"를 통해 HTTPS 사용 여부 확인 가능

# 백앤드 개발
    # API 설계
    # 서버사이드 로직 개발
    # 데이터 모델링
    # 성능 최적화
    # 테스트 및 디버깅
    # 문제 탐지와 해결
    # 문서화 및 협업

# API (Application Programming Interface)
    # 서로 다른 응용 프로그램간의 상호작용을 위한 규약
    # (서버-클라이언트 모델) 서버와 클라이언트 간 통신에 대한 인터페이스
    # 통신 환경 뿐만 아니라, 파이썬 라이브러리들이 제공하는 함수나 메소드도 API에 해당
    # 목적과 사용사례에 따른 설계

# API 설계 방법
    # 네트워크를 통해 웹 서버와의 상호작용을 위한 API
    # HTTP 방식을 주로 채택 (단방향, Stateless, 동기)
    # 일반적으로 RESTfil API 형태로 설계 (HTTP 요청의 종류와 주소의 조합)
        # 서버의 "자원"에 조회, 쓰기, 삭제 등의 요청을 요청자가 가진 권한을 통해 실행
        # GET /posts/{id}
        # POST /posts
        # PUT posts/{id}

# 성능 최적화
    # 불필요한 비즈니스 로직 제거를 통한 코드 최적화
    # CPU, 메모리 등의 효율성을 높이는 컴퓨팅 리소스 최적화
    # 압축, 이미지 사이즈 최적화 등을 통한 네트워킹 최적화
    # 비동기 통신과 병렬처리를 활용한 응답시간 최적화
    # 디버깅 및 프로파일링

# 테스트 및 디버깅
    # 단위 테스트 : 개별적인 함수, 모듈, 클래스 등을 테스트
    # 통합 테스트 : 다양한 모듈간의 상호작용과 데이터 흐름을 테스트
    # 성능 테스트 : 시스템이 대량의 요청량을 처리할 수 있는지 테스트

# 문서화 및 협업
    # 코드 주석 : 작성자의 의돌르 알 수 있게 할 수 있음
    # API 문서 : 클라이언트와 협업을 위해 반드시 최신화 된 API 문서를 공유
    # 애플리케이션 아키텍쳐 문서 작성 및 공유
    # 버전 관리 시스템(VCS)을 통한 코드 이력 관리 (ex. git)
    # 코드 리뷰

# 데이터베이스 특징: 트랜잭션(Transaction)
    # "하나"의 논리적 작업 단위
    # 트랜잭션을 통한 동시성 관리
    # ACID (Atomic, Consistency, Isolation, Durability)
    # 원자성, 일관성, 고립성, 지속성
    # 하나의 트랜잭션이 안전하게 수행됨을 보장하기 위한 성질

# 관계형 데이터베이싀 데이터 모델링
    # 개념적 데이터 모델링: 비즈니스 관점에서, 각 개체(Entity)와 그들의 관계를 표현
    # 논리적 데이터 모델링: 개념적 모델을 바탕으로 테이블, 열(Column), 관계 등을 정리
    # 정규화: 논리적 테이블의 중복을 최소화하고 데이터 일관성을 높임
    # 물리적 데이터 모델링: SQL 언어를 활용하여 실제 데이터베이스 구성

# 소프트웨어 아키텍쳐가 필요한 이유
    # 유지보수와 확장성, 성능과 효율성, 신뢰성과 안정성, 비용과 생산성

# 소프트웨어 아키텍쳐의 특징
    # 다수의 이해관계자, 관심사의 분리, 서비스 품질 주도적 설계, 스타일 재사용, 높은 추상화(인지적 제약)

# 아키텍트(설계자)의 역할
    # 프로젝트 관리자와의 협력, 이해 관계자들과의 주요 의사소통 및 협업, 아키텍쳐 설계 및 디자인 평가, 설계의 문서화

# 소프트웨어 설계
    # 분석, 디자인, 평가, 진화



# 웹 크롤링 vs 웹 스크래핑
    # 크롤러
        # Seed URL을 시작으로, 모든 하이퍼링크를 따라가며 새로운 페이지에 접근
        # 연결되 모든 페이지들을 조회, 페이지의 내용을 저장
    # 스크래핑
        # 특정 웹사이트에 접속, 가공하여 정보를 추출
        # 전체 HTML 코드를 다운받은 후, 필요한 부분을 발췌

# 웹 스크래핑 과정
    # 페이지 다운로드
    # 문서 분석
    # 데이터 추출
    # 데이터 가공 및 저장
    # 반복
# 데이터 수집 시 유의할 점
    # 로봇 표준 준수
    # 저작권 및 이용 정책 확인
    # 서버 부하 최소화
    # 개인 정보 보호
# 파이썬을 활용한 웹페이지 수집
    # requests 라이브러리
        # HTTP 요청을 보내는 라이브러리
    # BeaurifulSoup 라이브러리 
        # HTML 및 XML 문서를 파싱하고 데이터를 추출하는 데 사용
    # re 라이브러리 (정규 표현식)
        # 문자열의 패턴을 바탕으로 데이터를 추출